CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(fibio)

OPTION(WITH_CXX17 "Build with C++1z/17 support" OFF)
OPTION(WITH_REDIS "Build Redis library" ON)
OPTION(WITH_HTTP "Build HTTP library" ON)
OPTION(WITH_THRIFT "Build Thrift tests" ON)
OPTION(WITH_MYSQL "Build MySQL library" ON)
OPTION(WITH_CASSANDRA "Build Cassandra library" ON)
OPTION(WITH_VALGRIND "Build with valgrind support" ON)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
SET(CMAKE_CXX_STANDARD 14)
IF (WITH_CXX17)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z -ftemplate-depth=256")
ENDIF (WITH_CXX17)
IF (APPLE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations -Wno-deprecated-register -Wno-macro-redefined")
    SET(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} -stdlib=libc++")
ENDIF (APPLE)

FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(Boost 1.63.0 COMPONENTS system coroutine context thread REQUIRED)
FIND_PACKAGE(OpenSSL REQUIRED)

IF ((CMAKE_BUILD_TYPE MATCHES Debug) OR (NOT CMAKE_BUILD_TYPE))
    IF (WITH_VALGRIND)
        MESSAGE("Enable valgrind support")
        ADD_DEFINITIONS(-DHAVE_VALGRIND_H)
    ELSE (WITH_VALGRIND)
        MESSAGE("Disable valgrind support")
    ENDIF (WITH_VALGRIND)
ENDIF ((CMAKE_BUILD_TYPE MATCHES Debug) OR (NOT CMAKE_BUILD_TYPE))

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${OPENSSL_INCLUDE_DIR})

SET(FIBIO_DEPS)
LIST(APPEND FIBIO_DEPS fibio ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})

SET(FIBIO_DEPS_INCS)
LIST(APPEND FIBIO_DEPS_INCS ${Boost_INCLUDE_DIRS} ${OPENSSL_INCLUDE_DIR})

FIND_PACKAGE(ZLIB)
FIND_PACKAGE(Boost 1.63.0 COMPONENTS iostreams)
IF (ZLIB_FOUND AND Boost_FOUND)
    ADD_DEFINITIONS(-DHAVE_ZLIB)
    INCLUDE_DIRECTORIES(AFTER ${ZLIB_INCLUDE_DIR})
    LIST(APPEND FIBIO_DEPS ${ZLIB_LIBRARIES})
    LIST(APPEND FIBIO_DEPS ${Boost_LIBRARIES})
    LIST(APPEND FIBIO_DEPS_INCS ${ZLIB_INCLUDE_DIR})
ENDIF (ZLIB_FOUND AND Boost_FOUND)

INCLUDE_DIRECTORIES(AFTER ${CMAKE_SOURCE_DIR}/include)

IF (WIN32)
    LIST(APPEND FIBIO_DEPS wsock32 ws2_32)
ENDIF (WIN32)

IF (WITH_MYSQL)
    FIND_PACKAGE(MySQLConnectorCPP)
    IF (MYSQLCONNECTORCPP_FOUND)
        INCLUDE_DIRECTORIES(AFTER ${MYSQLCONNECTORCPP_INCLUDE_DIRS})
        LIST(APPEND FIBIO_DEPS ${MYSQLCONNECTORCPP_LIBRARIES})
        LIST(APPEND FIBIO_DEPS_INCS ${MYSQLCONNECTORCPP_INCLUDE_DIRS})
    ELSE (MYSQLCONNECTORCPP_FOUND)
        MESSAGE("MySQL Connector/C++ is not found, disable MySQL support")
    ENDIF (MYSQLCONNECTORCPP_FOUND)
ENDIF (WITH_MYSQL)

IF (WITH_CASSANDRA)
    FIND_PACKAGE(CassandraDriver)
    IF (CASSANDRADRIVER_FOUND)
        INCLUDE_DIRECTORIES(AFTER ${CASSANDRADRIVER_INCLUDE_DIRS})
        LIST(APPEND FIBIO_DEPS ${CASSANDRADRIVER_LIBRARIES})
        LIST(APPEND FIBIO_DEPS_INCS ${CASSANDRADRIVER_INCLUDE_DIRS})
    ELSE (CASSANDRADRIVER_FOUND)
        MESSAGE("Cassandra C/C++ driver is not found, disable Cassandra support")
    ENDIF (CASSANDRADRIVER_FOUND)
ENDIF (WITH_CASSANDRA)

SET(FIBIO_LIBS fibio ${FIBIO_DEPS})

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(example)

INCLUDE("CPackLists.txt")

ENABLE_TESTING()
